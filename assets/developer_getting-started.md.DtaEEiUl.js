import{_ as e,c as a,o,a4 as t}from"./chunks/framework.BmdFiWrL.js";const g=JSON.parse('{"title":"快速开始","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"developer/getting-started.md","filePath":"developer/getting-started.md","lastUpdated":1756917506000}'),d={name:"developer/getting-started.md"},s=t(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>本文档将引导您一步步构建开发环境, 并让您能够快速参与到 NeZha 的开发中来.</p><p>首先 fork 一下 nezha 的仓库用于保存修改, 接下来您可以选择使用容器开发或在本地开发, 为了让您能更快速的开始开发,本文先介绍容器开发.</p><h2 id="容器开发环境" tabindex="-1">容器开发环境 <a class="header-anchor" href="#容器开发环境" aria-label="Permalink to &quot;容器开发环境&quot;">​</a></h2><p>在 VSCode 中使用容器开发需要安装 <code>ms-vscode-remote.remote-containers</code> 插件</p><h3 id="github-codespaces" tabindex="-1">Github Codespaces <a class="header-anchor" href="#github-codespaces" aria-label="Permalink to &quot;Github Codespaces&quot;">​</a></h3><p>在你 fork 后的仓库中, 点击仓库右上角的 <code>Code</code> -&gt; <code>Codespaces</code> -&gt; <code>Create codespace on master</code> 来快速创建一个云端开发环境, 等待环境构建完成.</p><p>你也可以在 VSCode 或其他支持的 IDE 中安装 <code>GitHub.codespaces</code> 插件后直接连接</p><h3 id="远程容器开发" tabindex="-1">远程容器开发 <a class="header-anchor" href="#远程容器开发" aria-label="Permalink to &quot;远程容器开发&quot;">​</a></h3><p>如果你有一台专用的开发服务器, 上面有 Docker 或其兼容程序, 那么你可以通过 SSH 创建并构建远程开发容器并在远程服务器上进行开发, 此处以 VSCode 举例:</p><ol><li>配置你的 <code>~/.ssh/config</code>(*nux) 或 <code>%HOMEPATH%/.ssh/config</code>(Windows) 文件, 下面是一个简单的示例:<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Host Dev</span></span>
<span class="line"><span>  HostName dev.server.host</span></span>
<span class="line"><span>  User &lt;你的用户名&gt;</span></span>
<span class="line"><span>  IdentityFile &lt;你的私钥路径&gt;</span></span></code></pre></div></li><li>使用 SSH 登陆远程服务器. 如果你正确配置了第一步, 此时可以用命令 <code>ssh Dev</code> 来测试</li><li>在服务器上克隆仓库: <code>git clone &lt;你 fork 后的仓库地址&gt;</code></li><li>打开 VSCode 左侧栏的远程资源管理器, 需要安装 <code>remote</code> 系列的官方插件</li><li>使用 VSCode 打开你 clone 后的目录</li><li>按下 <code>F1</code> 在弹出的对话框中键入并选择 <code>Dev Containers: Rebuild and Reopen in Container</code></li><li>等待开发环境构建完成</li></ol><h3 id="本地容器开发" tabindex="-1">本地容器开发 <a class="header-anchor" href="#本地容器开发" aria-label="Permalink to &quot;本地容器开发&quot;">​</a></h3><p>如果你机器本地有 Docker 或其兼容程序, 那么你可以在本地创建并构建开发容器, 通常你会遇到网络问题, 请自行解决, 此处以 VSCode 举例:</p><ol><li>克隆仓库. 使用命令: <code>git clone &lt;你 fork 后的仓库地址&gt;</code></li><li>使用 VSCode 打开你 clone 后的目录</li><li>按下 <code>F1</code> 在弹出的对话框中键入并选择 <code>Dev Containers: Rebuild and Reopen in Container</code></li><li>等待开发环境构建完成</li></ol><h2 id="开始开发" tabindex="-1">开始开发 <a class="header-anchor" href="#开始开发" aria-label="Permalink to &quot;开始开发&quot;">​</a></h2><p>在完成环境的自动构建后 Nezha 默认处于能随时编译的状态, 你可以开始自由编辑后运行 <code>.devcontainer/build.sh</code> 进行编译测试.</p><h3 id="阅读文档" tabindex="-1">阅读文档 <a class="header-anchor" href="#阅读文档" aria-label="Permalink to &quot;阅读文档&quot;">​</a></h3><p>你可可以查阅<a href="./api.html">API 文档</a>来了解 NeZha 提供了哪些 WebAPI 以供调用.</p><p>如果你使用上面提供的容器开发环境之一, 那么这些文件均已构建完毕, 存储在开发环境的 <code>cmd/dashboard/docs</code> 目录下</p>`,19),i=[s];function c(n,l,r,p,h,u){return o(),a("div",null,i)}const _=e(d,[["render",c]]);export{g as __pageData,_ as default};
